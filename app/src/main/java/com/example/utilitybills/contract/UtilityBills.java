package com.example.utilitybills.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class UtilityBills extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_REGISTER = "Register";

    public static final String FUNC_LOGIN = "LogIn";

    public static final String FUNC_LOGINASADMIN = "LogInAsAdmin";

    public static final String FUNC_GETPAYERINFO = "GetPayerInfo";

    public static final String FUNC_MAKEPAYMENT = "MakePayment";

    public static final String FUNC_GETPAYERS = "GetPayers";

    public static final String FUNC_ADDDEBT = "AddDebt";

    public static final String FUNC_ADDDEBTTOALL = "AddDebtToAll";

    public static final String FUNC_GETBALANCE = "GetBalance";

    public static final String FUNC_WITHDRAW = "Withdraw";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("1337", "0x9fC79336D2F050e7E1cd479795d0698A73ecD65B");
        _addresses.put("5777", "0x34D8e4868101b73cC2Fe8A8C41e06951f0F28309");
    }

    @Deprecated
    protected UtilityBills(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UtilityBills(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UtilityBills(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UtilityBills(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> Register(String payerAddress, String username, String password, String firstName, String middleName, String lastName) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.asList(new org.web3j.abi.datatypes.Address(payerAddress),
                        new org.web3j.abi.datatypes.Utf8String(username),
                        new org.web3j.abi.datatypes.Utf8String(password),
                        new org.web3j.abi.datatypes.Utf8String(firstName),
                        new org.web3j.abi.datatypes.Utf8String(middleName),
                        new org.web3j.abi.datatypes.Utf8String(lastName)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> LogIn(String username, String password) {
        final Function function = new Function(FUNC_LOGIN,
                Arrays.asList(new org.web3j.abi.datatypes.Utf8String(username),
                        new org.web3j.abi.datatypes.Utf8String(password)),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> LogInAsAdmin() {
        final Function function = new Function(FUNC_LOGINASADMIN,
                Collections.emptyList(),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Payer> GetPayerInfo(String payerAddress) {
        final Function function = new Function(FUNC_GETPAYERINFO,
                List.of(new Address(payerAddress)),
                List.of(new TypeReference<Payer>() {}));
        return executeRemoteCallSingleValueReturn(function, Payer.class);
    }

    public RemoteFunctionCall<TransactionReceipt> MakePayment(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAKEPAYMENT,
                Collections.emptyList(),
                Collections.emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<List<ShortPayer>> GetPayers() {
        final Function function = new Function(FUNC_GETPAYERS,
                Collections.emptyList(),
                List.of(new TypeReference<DynamicArray<ShortPayer>>() {}));
        return new RemoteFunctionCall<>(function,
                () -> {
                    @SuppressWarnings("unchecked")
                    List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                    return convertToNative(result);
                });
    }

    public RemoteFunctionCall<TransactionReceipt> AddDebt(String payerAddress, BigInteger debtAmount) {
        final Function function = new Function(
                FUNC_ADDDEBT,
                Arrays.asList(new org.web3j.abi.datatypes.Address(payerAddress),
                        new org.web3j.abi.datatypes.generated.Uint256(debtAmount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> AddDebtToAll(BigInteger debtAmount) {
        final Function function = new Function(
                FUNC_ADDDEBTTOALL,
                List.of(new Uint256(debtAmount)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> GetBalance() {
        final Function function = new Function(FUNC_GETBALANCE,
                Collections.emptyList(),
                List.of(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> Withdraw(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Collections.emptyList(),
                Collections.emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static UtilityBills load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UtilityBills(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UtilityBills load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UtilityBills(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UtilityBills load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UtilityBills(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UtilityBills load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UtilityBills(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UtilityBills> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UtilityBills.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<UtilityBills> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UtilityBills.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UtilityBills> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UtilityBills.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UtilityBills> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UtilityBills.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class Payer extends DynamicStruct {
        public String payerAddress;

        public String username;

        public String password;

        public String firstName;

        public String middleName;

        public String lastName;

        public BigInteger debt;

        public Payer(String payerAddress, String username, String password, String firstName, String middleName, String lastName, BigInteger debt) {
            super(new org.web3j.abi.datatypes.Address(payerAddress),
                    new org.web3j.abi.datatypes.Utf8String(username),
                    new org.web3j.abi.datatypes.Utf8String(password),
                    new org.web3j.abi.datatypes.Utf8String(firstName),
                    new org.web3j.abi.datatypes.Utf8String(middleName),
                    new org.web3j.abi.datatypes.Utf8String(lastName),
                    new org.web3j.abi.datatypes.generated.Uint256(debt));
            this.payerAddress = payerAddress;
            this.username = username;
            this.password = password;
            this.firstName = firstName;
            this.middleName = middleName;
            this.lastName = lastName;
            this.debt = debt;
        }

        public Payer(Address payerAddress, Utf8String username, Utf8String password, Utf8String firstName, Utf8String middleName, Utf8String lastName, Uint256 debt) {
            super(payerAddress, username, password, firstName, middleName, lastName, debt);
            this.payerAddress = payerAddress.getValue();
            this.username = username.getValue();
            this.password = password.getValue();
            this.firstName = firstName.getValue();
            this.middleName = middleName.getValue();
            this.lastName = lastName.getValue();
            this.debt = debt.getValue();
        }
    }

    public static class ShortPayer extends DynamicStruct {
        public String payerAddress;

        public String firstName;

        public String middleName;

        public String lastName;

        public BigInteger debt;

        public ShortPayer(String payerAddress, String firstName, String middleName, String lastName, BigInteger debt) {
            super(new org.web3j.abi.datatypes.Address(payerAddress),
                    new org.web3j.abi.datatypes.Utf8String(firstName),
                    new org.web3j.abi.datatypes.Utf8String(middleName),
                    new org.web3j.abi.datatypes.Utf8String(lastName),
                    new org.web3j.abi.datatypes.generated.Uint256(debt));
            this.payerAddress = payerAddress;
            this.firstName = firstName;
            this.middleName = middleName;
            this.lastName = lastName;
            this.debt = debt;
        }

        public ShortPayer(Address payerAddress, Utf8String firstName, Utf8String middleName, Utf8String lastName, Uint256 debt) {
            super(payerAddress, firstName, middleName, lastName, debt);
            this.payerAddress = payerAddress.getValue();
            this.firstName = firstName.getValue();
            this.middleName = middleName.getValue();
            this.lastName = lastName.getValue();
            this.debt = debt.getValue();
        }
    }
}
